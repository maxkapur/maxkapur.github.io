"""
Minimal character-level Vanilla RNN model. Written by Andrej Karpathy (@karpathy)
BSD License
"""

import numpy

print('\nReading training data ... \n')

# data I/O
data = open('cleantext.txt', 'r').read() # should be simple plain text file
data= data.split(" ") # Added per commenter's suggestion
chars = list(set(data))
data_size, vocab_size = len(data), len(chars)
print('data has %d characters, %d unique.\n' % (data_size, vocab_size))
char_to_ix = { ch:i for i,ch in enumerate(chars) }
ix_to_char = { i:ch for i,ch in enumerate(chars) }

print('Text will be sampled every 10 iterations. \nTraining the model ... \n')

# hyperparameters
hidden_size = 100 # size of hidden layer of neurons (100)
seq_length = 2 # number of steps to unroll the RNN for (25)
learning_rate = 1.8e-1 #(1e-1)

# model parameters
Wxh = numpy.random.randn(hidden_size, vocab_size)*0.01 # input to hidden
Whh = numpy.random.randn(hidden_size, hidden_size)*0.01 # hidden to hidden
Why = numpy.random.randn(vocab_size, hidden_size)*0.01 # hidden to output
bh = numpy.zeros((hidden_size, 1)) # hidden bias
by = numpy.zeros((vocab_size, 1)) # output bias

def lossFun(inputs, targets, hprev):
  """
  inputs,targets are both list of integers.
  hprev is Hx1 array of initial hidden state
  returns the loss, gradients on model parameters, and last hidden state
  """
  xs, hs, ys, ps = {}, {}, {}, {}
  hs[-1] = numpy.copy(hprev)
  loss = 0
  # forward pass
  for t in range(len(inputs)):
    xs[t] = numpy.zeros((vocab_size,1)) # encode in 1-of-k representation
    xs[t][inputs[t]] = 1
    hs[t] = numpy.tanh(numpy.dot(Wxh, xs[t]) + numpy.dot(Whh, hs[t-1]) + bh) # hidden state
    ys[t] = numpy.dot(Why, hs[t]) + by # unnormalized log probabilities for next chars
    ps[t] = numpy.exp(ys[t]) / numpy.sum(numpy.exp(ys[t])) # probabilities for next chars
    loss += -numpy.log(ps[t][targets[t],0]) # softmax (cross-entropy loss)
  # backward pass: compute gradients going backwards
  dWxh, dWhh, dWhy = numpy.zeros_like(Wxh), numpy.zeros_like(Whh), numpy.zeros_like(Why)
  dbh, dby = numpy.zeros_like(bh), numpy.zeros_like(by)
  dhnext = numpy.zeros_like(hs[0])
  for t in reversed(range(len(inputs))):
    dy = numpy.copy(ps[t])
    dy[targets[t]] -= 1 # backprop into y. see http://cs231n.github.io/neural-networks-case-study/#grad if confused here
    dWhy += numpy.dot(dy, hs[t].T)
    dby += dy
    dh = numpy.dot(Why.T, dy) + dhnext # backprop into h
    dhraw = (1 - hs[t] * hs[t]) * dh # backprop through tanh nonlinearity
    dbh += dhraw
    dWxh += numpy.dot(dhraw, xs[t].T)
    dWhh += numpy.dot(dhraw, hs[t-1].T)
    dhnext = numpy.dot(Whh.T, dhraw)
  for dparam in [dWxh, dWhh, dWhy, dbh, dby]:
    numpy.clip(dparam, -5, 5, out=dparam) # clip to mitigate exploding gradients
  return loss, dWxh, dWhh, dWhy, dbh, dby, hs[len(inputs)-1]

def sample(h, seed_ix, n):
  """ 
  sample a sequence of integers from the model 
  h is memory state, seed_ix is seed letter for first time step
  """
  x = numpy.zeros((vocab_size, 1))
  x[seed_ix] = 1
  ixes = []
  for t in range(n):
    h = numpy.tanh(numpy.dot(Wxh, x) + numpy.dot(Whh, h) + bh)
    y = numpy.dot(Why, h) + by
    p = numpy.exp(y) / numpy.sum(numpy.exp(y))
    ix = numpy.random.choice(range(vocab_size), p=p.ravel())
    x = numpy.zeros((vocab_size, 1))
    x[ix] = 1
    ixes.append(ix)
  return ixes

n, p = 0, 0
mWxh, mWhh, mWhy = numpy.zeros_like(Wxh), numpy.zeros_like(Whh), numpy.zeros_like(Why)
mbh, mby = numpy.zeros_like(bh), numpy.zeros_like(by) # memory variables for Adagrad
smooth_loss = -numpy.log(1.0/vocab_size)*seq_length # loss at iteration 0
while True:
  # prepare inputs (we're sweeping from left to right in steps seq_length long)
  if p+seq_length+1 >= len(data) or n == 0: 
    hprev = numpy.zeros((hidden_size,1)) # reset RNN memory
    p = 0 # go from start of data
  inputs = [char_to_ix[ch] for ch in data[p:p+seq_length]]
  targets = [char_to_ix[ch] for ch in data[p+1:p+seq_length+1]]

  # sample from the model now and then
  if (n % 10 == 0):
    sample_ix = sample(hprev, inputs[0], 50)
    txt = ' '.join(ix_to_char[ix] for ix in sample_ix) # Adding a space back here
    print('----\n %s \n----' % (txt, ))

  # forward seq_length characters through the net and fetch gradient
  loss, dWxh, dWhh, dWhy, dbh, dby, hprev = lossFun(inputs, targets, hprev)
  smooth_loss = smooth_loss * 0.999 + loss * 0.001
  if n % 10 == 0: print('iter %d, loss: %f' % (n, smooth_loss)) # print progress
  
  # perform parameter update with Adagrad
  for param, dparam, mem in zip([Wxh, Whh, Why, bh, by], 
                                [dWxh, dWhh, dWhy, dbh, dby], 
                                [mWxh, mWhh, mWhy, mbh, mby]):
    mem += dparam * dparam
    param += -learning_rate * dparam / numpy.sqrt(mem + 1e-8) # adagrad update

  p += seq_length # move data pointer
  n += 1 # iteration counter 